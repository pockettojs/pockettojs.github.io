"use strict";(self.webpackChunkpocketto_docs=self.webpackChunkpocketto_docs||[]).push([[8217],{3801:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var t=a(4848),i=a(8453);const s={sidebar_label:"Data Sharding",title:"Data Sharding",sidebar_position:5},r=void 0,d={id:"data-management/data-sharding",title:"Data Sharding",description:"Introduction",source:"@site/docs/data-management/data-sharding.md",sourceDirName:"data-management",slug:"/data-management/data-sharding",permalink:"/docs/data-management/data-sharding",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Data Sharding",title:"Data Sharding",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Data Conflict",permalink:"/docs/data-management/data-conflict"},next:{title:"Frontend API references"}},o={},c=[{value:"Introduction",id:"introduction",level:3},{value:"Usage - Time Series",id:"usage---time-series",level:3}];function l(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"Data sharding is a method of partitioning data across multiple servers. It is a technique used to distribute data across multiple servers to improve the performance and scalability of the database. Sharding is a common technique used in distributed databases to improve the performance of the database by distributing the data across multiple servers."}),"\n",(0,t.jsxs)(n.p,{children:["To sharding the model data into different databases, you can declare ",(0,t.jsx)(n.code,{children:"shardingMode"})," in your model."]}),"\n",(0,t.jsxs)(n.p,{children:["Please also setup for ",(0,t.jsx)(n.code,{children:"setMainDatabaseName"})," before using the sharding mode. The first argument is the database name, and the second argument is the database adapter."]}),"\n",(0,t.jsx)(n.p,{children:"Available adapters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"memory"}),": An adapter to store data in memory."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"idb"}),": An adapter to store data in IndexedDB."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"leveldb"}),": An adapter to store data in LevelDB."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"websql"}),": An adapter to store data in WebSQL."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"http"}),": An adapter to store data in a remote server."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { p, Model, ShardingMode } from 'pocketto';\n\np.setMainDatabaseName('master', 'idb');\np.bootDatabases();\n\nclass SalesInvoice extends Model {\n  static dbName = 'master';\n  static collectionName = 'SalesInvoices';\n  static shardingMode = ShardingMode.TimeSeries;\n\n  invoiceNumber!: string;\n  customerName!: string;\n  remarks?: string;\n\n  @HasMany('SalesInvoiceItem')\n  items?: SalesInvoiceItem[];\n\n  get totalAmount() {\n    return this.items?.reduce((total, item) => total + item.amount, 0) ?? 0;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"usage---time-series",children:"Usage - Time Series"}),"\n",(0,t.jsxs)(n.p,{children:["To use the time series sharding mode, you can set the ",(0,t.jsx)(n.code,{children:"shardingMode"})," to ",(0,t.jsx)(n.code,{children:"ShardingMode.TimeSeries"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The database will automatically create a new database for each month when you want to create a instance within the period. The database name will be in the format of ",(0,t.jsx)(n.code,{children:"master-2021-01"}),", ",(0,t.jsx)(n.code,{children:"master-2021-02"}),", ",(0,t.jsx)(n.code,{children:"master-2021-03"}),", and so on."]}),"\n",(0,t.jsxs)(n.p,{children:["You can pass in ",(0,t.jsx)(n.code,{children:"period"})," as the second argument when creating a new instance."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const invoice = await Invoice.create({\n  invoiceNumber: 'INV-2021-01-001',\n  customerName: 'John Doe',\n  remarks: 'This is a test invoice',\n  items: [\n    { description: 'Item 1', quantity: 1, price: 100 },\n    { description: 'Item 2', quantity: 2, price: 200 },\n  ],\n}, '2021-01');\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can manage the data by normal query methods."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const savedInvoice = await Invoice.find(invoice.id);\nsavedInvoice.remarks = 'This is a test invoice updated';\nawait savedInvoice.save();\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>d});var t=a(6540);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);